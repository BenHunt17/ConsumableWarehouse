// <auto-generated />
using ConsumableWarehouse.DataPersistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsumableWarehouse.DataPersistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250727130036_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.AffiliateProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffiliateLink")
                        .IsRequired()
                        .HasMaxLength(999)
                        .HasColumnType("nvarchar(999)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(99)
                        .HasColumnType("nvarchar(99)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("AffiliateProducts");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.FreeTextProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasMaxLength(99)
                        .HasColumnType("int");

                    b.Property<int>("WishlistProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WishlistProductId")
                        .IsUnique();

                    b.ToTable("FreeTextProduct");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(99)
                        .HasColumnType("nvarchar(99)");

                    b.Property<string>("ContactEmailAddress")
                        .IsRequired()
                        .HasMaxLength(99)
                        .HasColumnType("nvarchar(99)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(99)
                        .HasColumnType("nvarchar(99)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(99)
                        .HasColumnType("nvarchar(99)");

                    b.HasKey("Id");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.WishlistProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AffiliateProductId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(999)
                        .HasColumnType("nvarchar(999)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateProductId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistProduct");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.AffiliateProduct", b =>
                {
                    b.HasOne("ConsumableWarehouse.Domain.Entities.Partner", "Partner")
                        .WithMany("AffiliateProducts")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsumableWarehouse.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("AffiliateProducts")
                        .HasForeignKey("ProductCategoryId");

                    b.Navigation("Partner");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.FreeTextProduct", b =>
                {
                    b.HasOne("ConsumableWarehouse.Domain.Entities.WishlistProduct", "WishlistProduct")
                        .WithOne("FreeTextProduct")
                        .HasForeignKey("ConsumableWarehouse.Domain.Entities.FreeTextProduct", "WishlistProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("ConsumableWarehouse.Domain.Entities.ProductCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.WishlistProduct", b =>
                {
                    b.HasOne("ConsumableWarehouse.Domain.Entities.AffiliateProduct", "AffiliateProduct")
                        .WithMany("WishlistProducts")
                        .HasForeignKey("AffiliateProductId");

                    b.HasOne("ConsumableWarehouse.Domain.Entities.Wishlist", "Wishlist")
                        .WithMany("Products")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffiliateProduct");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.AffiliateProduct", b =>
                {
                    b.Navigation("WishlistProducts");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.Partner", b =>
                {
                    b.Navigation("AffiliateProducts");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("AffiliateProducts");

                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.Wishlist", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ConsumableWarehouse.Domain.Entities.WishlistProduct", b =>
                {
                    b.Navigation("FreeTextProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
