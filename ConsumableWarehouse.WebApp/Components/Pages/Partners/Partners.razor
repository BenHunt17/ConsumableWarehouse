@using Blazored.Modal.Services
@using ConsumableWarehouse.Domain.Dtos.Form
@using ConsumableWarehouse.Domain.Entities
@using ConsumableWarehouse.Domain.Interfaces.Services

@page "/partners"

@inject IPartnerService PartnerService

<PageTitle>Partners</PageTitle>

<div class="hstack justify-content-between">
    <h3>Partners</h3>
    <button class="btn btn-primary" @onclick="OpenModal">Register new partner</button>
</div>


@if (partners == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PartnersTable partners="@partners" OnPartnerUpdated="@OnPartnerUpdated" OnPartnerDeleted="@OnPartnerDeleted" />
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private List<Partner> partners;

    protected override async Task OnInitializedAsync()
    {
        partners = PartnerService.FindAllPartners()
            .ToList();
    }

    private async Task OpenModal()
    {
        var modal = Modal.Show<RegisterPartnerModal>("Register new partner", new ModalOptions
        {
            Position = ModalPosition.Middle,
        });

        var result = await modal.Result;

        if (!result.Cancelled && result.Data is Partner)
        {
            partners.Add((Partner)result.Data);
        }
    }

    private async Task OnPartnerUpdated(Partner partner)
    {
        var partnerToUpdate = partners.FirstOrDefault(x => x.Id == partner.Id);

        partnerToUpdate = partner;
    }

    private async Task OnPartnerDeleted(Partner partner)
    {
        var partnerToRemove = partners.FirstOrDefault(x => x.Id == partner.Id);

        if (partnerToRemove != null)
        {
            partners.Remove(partnerToRemove);
        }
    }
}
